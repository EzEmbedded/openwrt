---  a/drivers/usb/serial/option.c    2021-02-02 15:59:31.663720254 +0800
+++ b/drivers/usb/serial/option.c        2021-02-02 15:59:31.659720258 +0800
@@ -1094,9 +1094,9 @@
        { USB_DEVICE(QUALCOMM_VENDOR_ID, 0x9000), /* SIMCom SIM5218 */
          .driver_info = NCTRL(0) | NCTRL(1) | NCTRL(2) | NCTRL(3) | RSVD(4) },
        /* Quectel products using Qualcomm vendor ID */
-       { USB_DEVICE(QUALCOMM_VENDOR_ID, QUECTEL_PRODUCT_EC20)},
        { USB_DEVICE(QUALCOMM_VENDOR_ID, QUECTEL_PRODUCT_UC15)},
        { USB_DEVICE(QUALCOMM_VENDOR_ID, QUECTEL_PRODUCT_UC20),
+       { USB_DEVICE(QUALCOMM_VENDOR_ID, QUECTEL_PRODUCT_EC20),
          .driver_info = RSVD(4) },
        /* Yuga products use Qualcomm vendor ID */
        { USB_DEVICE(QUALCOMM_VENDOR_ID, YUGA_PRODUCT_CLM920_NC5),
@@ -2104,7 +2104,7 @@
        .resume            = usb_wwan_resume,
 #if 1 //Added by Quectel
     .reset_resume = usb_wwan_resume,
-#endif
+#endif
 #endif
 };
 
@@ -2157,6 +2157,18 @@
        if (device_flags & NUMEP2 && iface_desc->bNumEndpoints != 2)
                return -ENODEV;
 
+#if 1 //Added by Quectel
+    //Quectel UC20's interface 4 can be used as USB network device
+    if (serial->dev->descriptor.idVendor == cpu_to_le16(0x05C6) && serial->dev->descriptor.idProduct == cpu_to_le16(0x9003) && serial->interface->cur_altsetting->desc.bInterfaceNumber >= 4)
+        return -ENODEV;
+     //Quectel EC20's interface 4 can be used as USB network device
+    if (serial->dev->descriptor.idVendor == cpu_to_le16(0x05C6) && serial->dev->descriptor.idProduct == cpu_to_le16(0x9215) && serial->interface->cur_altsetting->desc.bInterfaceNumber >= 4)
+        return -ENODEV;
+    //Quectel EC25&EC21&EG91&EG95&EG06&EP06&EM06&BG96/AG35's interface 4 can be used as USB network device
+    if (serial->dev->descriptor.idVendor == cpu_to_le16(0x2C7C) && serial->interface->cur_altsetting->desc.bInterfaceNumber >= 4)
+        return -ENODEV;
+#endif
+
        /* Store the device flags so we can use them during attach. */
        usb_set_serial_data(serial, (void *)device_flags);
		
		
--- a/drivers/usb/serial/qcserial.c  2021-02-02 15:59:31.663720254 +0800
+++ b/drivers/usb/serial/qcserial.c      2021-02-02 15:59:31.659720258 +0800
@@ -92,7 +92,6 @@
        {USB_DEVICE(0x03f0, 0x241d)},   /* HP Gobi 2000 QDL device (VP412) */
        {USB_DEVICE(0x03f0, 0x251d)},   /* HP Gobi 2000 Modem device (VP412) */
        {USB_DEVICE(0x05c6, 0x9214)},   /* Acer Gobi 2000 QDL device (VP413) */
-       {USB_DEVICE(0x05c6, 0x9215)},   /* Acer Gobi 2000 Modem device (VP413) */
        {USB_DEVICE(0x05c6, 0x9264)},   /* Asus Gobi 2000 QDL device (VR305) */
        {USB_DEVICE(0x05c6, 0x9265)},   /* Asus Gobi 2000 Modem device (VR305) */
        {USB_DEVICE(0x05c6, 0x9234)},   /* Top Global Gobi 2000 QDL device (VR306) */
		
--- a/drivers/net/usb/qmi_wwan.c  2021-02-02 15:59:31.663720254 +0800
+++ b/drivers/net/usb/qmi_wwan.c      2021-02-02 15:59:31.659720258 +0800
@@ -22,6 +22,66 @@
 #include <linux/usb/cdc.h>
 #include <linux/usb/usbnet.h>
 #include <linux/usb/cdc-wdm.h>
+#if 1 //Added by Quectel
+#include <linux/etherdevice.h>
+struct sk_buff *qmi_wwan_tx_fixup(struct usbnet *dev, struct sk_buff *skb, gfp_t flags)
+{
+       if (dev->udev->descriptor.idVendor != cpu_to_le16(0x2C7C))
+               return skb;
+       // Skip Ethernet header from message
+       if (skb_pull(skb, ETH_HLEN)) {
+               return skb;
+               } else {
+                dev_err(&dev->intf->dev, "Packet Dropped ");
+               }
+       // Filter the packet out, release it
+       dev_kfree_skb_any(skb);
+               return NULL;
+}
+#include <linux/version.h>
+#if (LINUX_VERSION_CODE < KERNEL_VERSION( 3,9,1 ))
+static int qmi_wwan_rx_fixup(struct usbnet *dev, struct sk_buff *skb)
+{
+       __be16 proto;
+       if (dev->udev->descriptor.idVendor != cpu_to_le16(0x2C7C))
+               return 1;
+       /* This check is no longer done by usbnet */
+       if (skb->len < dev->net->hard_header_len)
+               return 0;
+       switch (skb->data[0] & 0xf0) {
+               case 0x40:
+                       proto = htons(ETH_P_IP);
+                       break;
+               case 0x60:
+                       proto = htons(ETH_P_IPV6);
+                       break;
+               case 0x00:
+                       if (is_multicast_ether_addr(skb->data))
+                               return 1;
+            /* possibly bogus destination - rewrite just in case */
+                       skb_reset_mac_header(skb);
+                       goto fix_dest;
+               default:
+               /* pass along other packets without modifications */
+                       return 1;
+       }
+       if (skb_headroom(skb) < ETH_HLEN)
+               return 0;
+       skb_push(skb, ETH_HLEN);
+       skb_reset_mac_header(skb);
+       eth_hdr(skb)->h_proto = proto;
+       memset(eth_hdr(skb)->h_source, 0, ETH_ALEN);
+fix_dest:
+       memcpy(eth_hdr(skb)->h_dest, dev->net->dev_addr, ETH_ALEN);
+       return 1;
+}
+/* very simplistic detection of IPv4 or IPv6 headers */
+static bool possibly_iphdr(const char *data)
+{
+       return (data[0] & 0xd0) == 0x40;
+}
+#endif
+#endif
 
 /* This driver supports wwan (3G/LTE/?) devices using a vendor
  * specific management protocol called Qualcomm MSM Interface (QMI) -
@@ -752,6 +812,28 @@
        }
        dev->net->netdev_ops = &qmi_wwan_netdev_ops;
        dev->net->sysfs_groups[0] = &qmi_wwan_sysfs_attr_group;
+       #if 1 //Added by Quectel
+       if (dev->udev->descriptor.idVendor == cpu_to_le16(0x2C7C)) {
+               dev_info(&intf->dev, "Quectel
+               EC25&EC21&EG91&EG95&EG06&EP06&EM06&BG96&AG35 work on RawIP mode\n");
+               dev->net->flags |= IFF_NOARP;
+       #if (LINUX_VERSION_CODE < KERNEL_VERSION( 3,9,1 ))
+       /* make MAC addr easily distinguishable from an IP header */
+       if (possibly_iphdr(dev->net->dev_addr)) {
+               dev->net->dev_addr[0] |= 0x02; /* set local assignment bit */
+               dev->net->dev_addr[0] &= 0xbf; /* clear "IP" bit */
+       }
+       #endif
+       usb_control_msg(
+       interface_to_usbdev(intf),
+       usb_sndctrlpipe(interface_to_usbdev(intf), 0),
+       0x22, //USB_CDC_REQ_SET_CONTROL_LINE_STATE
+       0x21, //USB_DIR_OUT | USB_TYPE_CLASS | USB_RECIP_INTERFACE
+       1, //active CDC DTR
+       intf->cur_altsetting->desc.bInterfaceNumber,
+       NULL, 0, 100);
+       }
+#endif
 err:
        return status;
 }
@@ -842,7 +924,10 @@
        .bind           = qmi_wwan_bind,
        .unbind         = qmi_wwan_unbind,
        .manage_power   = qmi_wwan_manage_power,
-       .rx_fixup       = qmi_wwan_rx_fixup,
+#if 1 //Added by Quectel
+       .tx_fixup = qmi_wwan_tx_fixup,
+       .rx_fixup = qmi_wwan_rx_fixup,
+#endif
 };
 
 static const struct driver_info        qmi_wwan_info_quirk_dtr = {
@@ -888,7 +973,31 @@
                                      USB_SUBCLASS_VENDOR_SPEC, 0xff), \
        .driver_info = (unsigned long)&qmi_wwan_info_quirk_dtr
 
-static const struct usb_device_id products[] = {
+static const struct usb_device_id products[] = {
+    #if 1 //Added by Quectel
+    #ifndef QMI_FIXED_INTF
+    /* map QMI/wwan function by a fixed interface number */
+    #define QMI_FIXED_INTF(vend, prod, num) \
+    .match_flags = USB_DEVICE_ID_MATCH_DEVICE |
+    USB_DEVICE_ID_MATCH_INT_INFO, \
+    .idVendor = vend, \
+       .idProduct = prod, \
+       .bInterfaceClass = 0xff, \
+       .bInterfaceSubClass = 0xff, \
+       .bInterfaceProtocol = 0xff, \
+       .driver_info = (unsigned long)&qmi_wwan_force_int##num,
+       #endif
+       { QMI_FIXED_INTF(0x05C6, 0x9003, 4) }, /* Quectel UC20 */
+       { QMI_FIXED_INTF(0x2C7C, 0x0125, 4) }, /* Quectel EC25 */
+       { QMI_FIXED_INTF(0x2C7C, 0x0121, 4) }, /* Quectel EC21 */
+       { QMI_FIXED_INTF(0x05C6, 0x9215, 4) }, /* Quectel EC20 */
+       { QMI_FIXED_INTF(0x2C7C, 0x0191, 4) }, /* Quectel EG91 */
+       { QMI_FIXED_INTF(0x2C7C, 0x0195, 4) }, /* Quectel EG95 */
+       { QMI_FIXED_INTF(0x2C7C, 0x0306, 4) }, /* Quectel EG06/EP06/EM06 */
+       { QMI_FIXED_INTF(0x2C7C, 0x0296, 4) }, /* Quectel BG96 */
+       { QMI_FIXED_INTF(0x2C7C, 0x0435, 4) }, /* Quectel AG35 */
+       #endif
+
        /* 1. CDC ECM like devices match on the control interface */
        {       /* Huawei E392, E398 and possibly others sharing both device id and more... */
                USB_VENDOR_AND_INTERFACE_INFO(HUAWEI_VENDOR_ID, USB_CLASS_VENDOR_SPEC, 1, 9),

--- a/drivers/usb/serial/usb_wwan.c  2021-02-02 15:59:31.663720254 +0800
+++ b/drivers/usb/serial/usb_wwan.c     2021-02-02 15:59:31.659720258 +0800
@@ -520,6 +520,7 @@
      urb->transfer_flags |= URB_ZERO_PACKET;
 }
 #endif
+
        return urb;
 }